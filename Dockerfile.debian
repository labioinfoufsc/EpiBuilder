# Base image: Debian 11
FROM debian:11

LABEL app="EpiBuilder"
LABEL version="2.0"
LABEL description="Bioinformatics tool environment for epitope prediction"

# Install system dependencies
RUN apt-get update && \
    apt-get install --no-install-recommends -y \
    python3-venv python3 python3-pip libgomp1 git unzip nano wget nginx curl \
    postgresql postgresql-contrib postgresql-client \
    && apt-get clean && rm -rf /var/lib/apt/lists/*

# Set Python alias
RUN ln -sf /usr/bin/python3 /usr/bin/python

# Install BLAST+
RUN wget -P /tmp https://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/ncbi-blast-2.17.0+-x64-linux.tar.gz && \
    tar -xzf /tmp/ncbi-blast-2.17.0+-x64-linux.tar.gz -C /tmp && \
    mv /tmp/ncbi-blast-2.17.0+/bin/blastp /usr/local/bin && \
    mv /tmp/ncbi-blast-2.17.0+/bin/makeblastdb /usr/local/bin && \
    rm -rf /tmp/ncbi-blast-2.17.0+ /tmp/ncbi-blast-2.17.0+-x64-linux.tar.gz

# Install OpenJDK 21
RUN wget -P /tmp https://download.oracle.com/java/21/latest/jdk-21_linux-x64_bin.tar.gz && \
    mkdir -p /usr/local/java && \
    tar -xzf /tmp/jdk-21_linux-x64_bin.tar.gz -C /usr/local/java && \
    rm /tmp/jdk-21_linux-x64_bin.tar.gz && \
    ln -sf /usr/local/java/jdk-21* /usr/local/java/default-java
ENV JAVA_HOME=/usr/local/java/default-java
ENV PATH=$JAVA_HOME/bin:$PATH

# Install Nextflow
RUN curl -s -o /usr/local/bin/nextflow https://get.nextflow.io && \
    chmod +x /usr/local/bin/nextflow
ENV PATH="/usr/local/bin/nextflow:${PATH}"

# Working directory
WORKDIR /opt/tools

# Copy application files
COPY pipeline/ /pipeline/
COPY backend/epibuilder-backend.jar /epibuilder/epibuilder-backend.jar
COPY core/epibuilder-core.jar /epibuilder/epibuilder-core.jar
COPY frontend/ /var/www/html/

# NGINX configuration
RUN rm -f /etc/nginx/sites-enabled/default
COPY nginx.conf /etc/nginx/sites-enabled/default

# Install BePiPred3
COPY bepipred3.zip /tmp/bepipred3.zip
RUN unzip /tmp/bepipred3.zip -d / && rm -f /tmp/bepipred3.zip

# Python environment setup
RUN python3 -m venv /venv
ENV PATH="/venv/bin:$PATH"
COPY requirements.txt /tmp/requirements.txt
RUN pip install --no-cache-dir -r /tmp/requirements.txt && rm -f /tmp/requirements.txt

# Download ESM models
RUN mkdir -p /models && \
    curl -o /models/esm2_t33_650M_UR50D-contact-regression.pt https://dl.fbaipublicfiles.com/fair-esm/regression/esm2_t33_650M_UR50D-contact-regression.pt && \
    curl -o /models/esm2_t33_650M_UR50D.pt https://dl.fbaipublicfiles.com/fair-esm/models/esm2_t33_650M_UR50D.pt

# Entrypoint setup
COPY entrypoint.sh /entrypoint.sh
COPY epibuilder.sh /epibuilder.sh
RUN chmod +x /entrypoint.sh /epibuilder.sh

# Ports
EXPOSE 80
EXPOSE 8080
EXPOSE 5432

WORKDIR /
ENTRYPOINT ["/entrypoint.sh"]