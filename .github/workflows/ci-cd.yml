name: CI/CD - Epibuilder Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
      core: ${{ steps.changes.outputs.core }}
    steps:
      - name: Checkout monorepo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: List changed files
        run: |
          git fetch origin main
          echo "Changed files:"
          git diff --name-only origin/main ${{ github.sha }}

      - name: Detect changes
        id: changes
        run: |
          git fetch origin main
          CHANGED=$(git diff --name-only origin/main ${{ github.sha }})

          echo "frontend=$(echo \"$CHANGED\" | grep '^frontend/' | wc -l)" >> $GITHUB_OUTPUT
          echo "backend=$(echo \"$CHANGED\" | grep '^backend/' | wc -l)" >> $GITHUB_OUTPUT
          echo "core=$(echo \"$CHANGED\" | grep '^core/' | wc -l)" >> $GITHUB_OUTPUT

      - name: Show changed modules
        run: |
          echo "Core changed:     [${{ steps.changes.outputs.core != '0' }}]"
          echo "Backend changed:  [${{ steps.changes.outputs.backend != '0' }}]"
          echo "Frontend changed: [${{ steps.changes.outputs.frontend != '0' }}]"

  build-core:
    needs: detect-changes
    if: needs.detect-changes.outputs.core != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 21
          cache: "maven"
      - name: Build core
        run: |
          cd core
          mvn clean package
          mkdir -p ../core-build
          cp target/epibuilder-core-jar-with-dependencies.jar ../core-build/epibuilder-core.jar
      - name: Upload core artifact
        uses: actions/upload-artifact@v4
        with:
          name: core-build
          path: core-build

  build-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: 21
          cache: "maven"
      - name: Build backend
        run: |
          cd backend
          mvn package -DskipTests
          mkdir -p ../backend-build
          cp target/*.jar ../backend-build/epibuilder-backend.jar
      - name: Upload backend artifact
        uses: actions/upload-artifact@v4
        with:
          name: backend-build
          path: backend-build

  build-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build
          echo "Inspecting build output..."
          ls -R dist || echo "'dist' folder not found."
          mkdir -p ../frontend-build
          cp -r dist/epibuilder/browser/* ../frontend-build/
      - name: Upload frontend artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend-build
  docker-build:
    needs: [detect-changes, build-core, build-backend, build-frontend]
    if: needs.detect-changes.outputs.core != '' || needs.detect-changes.outputs.backend != '' || needs.detect-changes.outputs.frontend != ''
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download core artifact
        uses: actions/download-artifact@v4
        with:
          name: core-build
          path: core-build

      - name: Download backend artifact
        uses: actions/download-artifact@v4
        with:
          name: backend-build
          path: backend-build

      - name: Download frontend artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend-build

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Prepare build context
        run: |
          mkdir build
          cp -r backend-build build/backend
          cp -r core-build build/core
          cp -r frontend-build build/frontend
          cp -r pipeline build/pipeline
          cp bepipred3.zip build/
          cp requirements.txt build/
          cp nginx.conf build/
          cp entrypoint.sh build/
          cp epibuilder.sh build/

      - name: Cleanup Docker before build
        run: |
          docker builder prune --all --force || true
          docker system prune --all --force || true
          sudo rm -rf /opt/hostedtoolcache || true
          sudo apt-get clean || true

      - name: Build & push Docker image (debian-cpu)
        run: |
          cd build
          docker buildx build --push \
            --rm --force-rm \
            -f ../Dockerfile.debian \
            -t ${{ secrets.DOCKER_USERNAME }}/epibuilder:debian-cpu-${{ github.sha }} \
            -t ${{ secrets.DOCKER_USERNAME }}/epibuilder:debian-cpu .

      - name: Build & push Docker image (ubuntu-gpu)
        run: |
          cd build
          docker buildx build --push \
            --rm --force-rm \
            -f ../Dockerfile.ubuntu \
            -t ${{ secrets.DOCKER_USERNAME }}/epibuilder:ubuntu-gpu-${{ github.sha }} \
            -t ${{ secrets.DOCKER_USERNAME }}/epibuilder:ubuntu-gpu .

      - name: Clean up temporary build folders
        run: |
          rm -rf core-build backend-build frontend-build build
